import pickle
import sys
import gzip
import os
import glob
import re

def read_pickle_file(filepath):
    if filepath.endswith('.gz'):
        with gzip.open(filepath, 'rb') as f:
            data = pickle.load(f)
    else:
        with open(filepath, 'rb') as f:
            data = pickle.load(f)
    return data

def find_all_pickle_files(directory, extensions=('.pkl', '.pkl.gz')):
    files = []
    for ext in extensions:
        files.extend(glob.glob(os.path.join(directory, f"*{ext}")))
    files.sort(key=os.path.getmtime)
    return files

def get_latest_prefix(files):
    # Extract timestamp prefix from filenames (format: YYYYMMDD_HHMMSS)
    pattern = re.compile(r"(\d{8}_\d{6})")
    prefixes = []
    for f in files:
        m = pattern.search(os.path.basename(f))
        if m:
            prefixes.append(m.group(1))
    if not prefixes:
        return None
    # Find the latest prefix
    latest = max(prefixes)
    return latest

def filter_files_by_prefix(files, prefix):
    return [f for f in files if prefix in os.path.basename(f)]

if __name__ == "__main__":
    if len(sys.argv) == 2:
        filepath = sys.argv[1]
        if not os.path.isfile(filepath):
            print(f"File not found: {filepath}")
            sys.exit(1)
        data = read_pickle_file(filepath)
        print(f"\n=== {os.path.basename(filepath)} ===")
        print(data)
    else:
        # Read all pickle files generated by the latest main.py run in ./result
        result_dir = os.path.join(os.path.dirname(__file__), "result")
        files = find_all_pickle_files(result_dir)
        if not files:
            print("No pickle files found in ./result directory.")
            sys.exit(1)
        latest_prefix = get_latest_prefix(files)
        if not latest_prefix:
            print("No timestamped pickle files found in ./result directory.")
            sys.exit(1)
        recent_files = filter_files_by_prefix(files, latest_prefix)
        if not recent_files:
            print("No recent pickle files found for the latest run.")
            sys.exit(1)
        for filepath in recent_files:
            print(f"\n=== {os.path.basename(filepath)} ===")
            try:
                data = read_pickle_file(filepath)
                print(data)
            except Exception as e:
                print(f"Error reading {filepath}: {e}")
